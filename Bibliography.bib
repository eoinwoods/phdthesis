@phdthesis{allen1997-wright,
abstract = {As software systems become more complex, the overall system structure—or software architecture—becomes a central design problem. A system's architecture provides a model of the system that suppresses implementation detail, allowing the architect to concentrate on the analyses and decisions that are most crucial to structuring the system to satisfy its requirements. Unfortunately, current representations of software architecture are informal and ad hoc. While architectural concepts are often embodied in infrastructure to support specific architectural styles and in the initial conceptualization of a system configuration, the lack of an explicit, independently-characterized architecture or architectural style significantly limits the benefits of software architectural design in current practice. In this dissertation, I show that an Architecture Description Language based on a formal, abstract model of system behavior can provide a practical means of describing and analyzing software architectures and architectural styles. This dissertation demonstrates this claim through WRIGHT, an architectural description language based on the formal description of the abstract behavior of architectural com- ponents and connectors. WRIGHT provides a practical formal basis for the description of both architectural configurations and of architectural styles. It is distinguished by the use of explicit, independent connector types as interaction patterns, the ability to describe the abstract behavior of components using a CSP-like notation, the characterization of styles using predicates over system instances, and a collection of static checks to determine the consistency and completeness of an architectural specification. We introduce techniques to support the analysis of large-scale systems, and demonstrate WRIGHT's expressiveness and practicality through three case studies.},
author = {Allen, Robert J.},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Allen - 1997 - A Formal Approach to Software Architecture.pdf:pdf},
number = {May},
pages = {248},
school = {Carnegie Mellon University},
title = {{A Formal Approach to Software Architecture}},
year = {1997}
}
@inproceedings{allen1996-aegis,
abstract = {Software architecture is receiving increasingly attention as a critical design level for software systems. However, the current practice of architectural description is largely informal and ad hoc, with the consequence that architectural documents serve as a poor communication mechanism, are difficult to analyze, and may have very little relationship to the implemented system. In an attempt to address these problems several researchers have experimented with formalisms for architectural specification and modelling. One such formalism is WRIGHT. In this paper we show how WRIGHT can be used to provide insight into an architectural design by modelling a prototype implementation of part of the AEGIS Weapons System.},
author = {Allen, Robert and Garlan, D},
booktitle = {8th International Workshop on Software Specification and Design (IWSSD 96)},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Allen, Garlan - 1996 - A Case Study in Architectural Modelling The AEGIS System.pdf:pdf},
number = {March},
pages = {6--15},
title = {{A Case Study in Architectural Modelling : The AEGIS System}},
url = {http://dl.acm.org/citation.cfm?id=858260},
year = {1996}
}
@article{allen1997-formalconn,
abstract = {As software systems become more complex, the overall system structure—or software architecture—becomes a central design problem. An important step toward an engineering discipline of software is a formal basis for describing and analyzing these designs. In the article we present a formal approach to one aspect of architectural design: the interactions among components. The key idea is to define architectural connectors as explicit semantic entities. These are specified as a collection of protocols that characterize each of the participant roles in an interaction and how these roles interact. We illustrate how this scheme can be used to define a variety of common architectural connectors. We further provide a formal semantics and show how this leads to a system in which architectural compatibility can be checked in a way analogous to type-checking in programming languages.},
author = {Allen, Robert and Garlan, David},
doi = {10.1145/258077.258078},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Allen, Garlan - 1997 - A formal basis for architectural connection.pdf:pdf},
issn = {1049331X},
journal = {ACM Transactions on Software Engineering and Methodology},
month = {jul},
number = {3},
pages = {213--249},
title = {{A formal basis for architectural connection}},
url = {http://dl.acm.org/citation.cfm?id=258078 http://portal.acm.org/citation.cfm?doid=258077.258078},
volume = {6},
year = {1997}
}
@inproceedings{asikainen2004-koala,
abstract = {An approach for modelling configurable software product families (CSPFs) and for automated configuring of product individuals using the models is presented. It is based on a similar approach for configuring physical products. The conceptual foundation and syntax of the Koalish modelling language used for this purpose are defined. The language extends Koala, a component model and architecture description language, with explicit variation modelling mecha- nisms. Koalish is further provided a formal semantics by defining a translation from it to Weight Constraint Rule Language (WCRL), a form of logic pro- grams. This allows using an existing inference tool for WCRL, smodels, to im- plement the reasoning needed in the configurator. The configurator is able to construct all valid product individuals, with respect to a Koalish model of a CSPF, that satisfy a given set of requirements. The implemented functionality of the configurator has been tested using small-scale toy examples, for which it performs adequately.},
author = {Asikainen, Timo and Soininen, Timo and M{\"{a}}nnist{\"{o}}, Tomi},
booktitle = {Software Product Family Engineering, LNCS 3014},
doi = {10.1007/978-3-540-24667-1_28},
editor = {Linden, Frank},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Asikainen, Soininen, M{\"{a}}nnist{\"{o}} - 2004 - A Koala-based approach for modelling and deploying configurable software product families.pdf:pdf},
pages = {225--249},
publisher = {Springer Berlin Heidelberg},
title = {{A Koala-based approach for modelling and deploying configurable software product families}},
url = {http://www.springerlink.com/index/nhekwtmm45g4gtll.pdf},
year = {2004}
}
@inproceedings{bashroush2005-adlars,
abstract = {Software Product Line (SPL) Engineering has emerged to become a mature domain for maximizing reuse within the context of a family of related software products. Within the process of SPL, the variability and commonality among the different products within the scope of a family is captured and modeled into a systems feature model. Currently, there are no Architecture Description Languages (ADLs) that support the relationship between the feature model domain and the system architecture domain, leaving a gap which significantly increases the complexity of analyzing the systems architecture and insuring that it complies with its set feature model and variability requirements. In this paper we present ADLARS, an Architecture Description Language that supports the relationship between the systems feature model and the architectural structures in an attempt to alleviate the aforementioned problem. The link between the two spaces also allows the automatic generation of product architectures from the family reference architecture.},
author = {Bashroush, R. and Brown, T.J. and Spence, I. and Kilpatrick, P.},
booktitle = {29th Annual IEEE/NASA Software Engineering Workshop},
doi = {10.1109/SEW.2005.17},
file = {::},
isbn = {0-7695-2306-4},
pages = {163--173},
publisher = {Ieee},
title = {{ADLARS: An Architecture Description Language for Software Product Lines}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1521204},
year = {2005}
}
@inproceedings{bashroush2008-ali,
author = {Bashroush, Rabih and Spence, Ivor and Kilpatrick, Peter and Brown, T. John and Gilani, Wasif and Fritzsche, Mathias},
booktitle = {15th Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems (ECBS 2008)},
doi = {10.1109/ECBS.2008.55},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Bashroush et al. - 2008 - ALI An Extensible Architecture Description Language for Industrial Applications.pdf:pdf},
isbn = {978-0-7695-3141-0},
month = {mar},
pages = {297--304},
publisher = {Ieee},
title = {{ALI: An Extensible Architecture Description Language for Industrial Applications}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4492411},
year = {2008}
}
@article{binns1996-metah,
author = {Binns, Pam and Englehart, Matt and Jackson, Mike and Vestal, Steve},
doi = {10.1142/S0218194096000107},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Binns et al. - 1996 - DOMAIN-SPECIFIC SOFTWARE ARCHITECTURES FOR GUIDANCE, NAVIGATION AND CONTROL.pdf:pdf},
issn = {0218-1940},
journal = {International Journal of Software Engineering and Knowledge Engineering},
month = {jun},
number = {02},
pages = {201--227},
title = {{Domain Specific Software Architectures for Guidance, Navigation and Control}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.25.8278 http://www.worldscientific.com/doi/abs/10.1142/S0218194096000107},
volume = {06},
year = {1996}
}
@inproceedings{boucke2007-xadl,
abstract = {Experience with building an architecture for an industrial Automatic Guided Vehicle Transportation System (AGVTS) shows that several essential concerns crosscut the architectural views. To cope with this, a stronger separation proved to be necessary, i.e. using different views for different concerns. In practice this was difficult, since the support for relations between views is very limited. This makes separation of concerns in views hard, thereby increasing maintenance overhead and reducing reuse capabilities. Our claim is that specifying compositions of views is as important as specifying the views itself. This paper extends a representative architectural description language (xADL) which support for composing structural views, by introducing three relations, namely refinement, mapping, and unification. Improving separation of concerns in views and their explicit composition enhances architecture understandability and changeability. The feasibility of the relations is assessed by redesigning the AGVTS architecture. Based on a real maintenance scenario, we investigate to what extent these explicit compositions lead (or not) to enhanced architectural changeability for evolving the distribution strategy in the AGVTS system.},
address = {Vancouver, Canada},
author = {Bouck{\'{e}}, N and Garcia, A and Holvoet, T},
booktitle = {10th international conference on Early aspects: current challenges and future directions, LNCS 4765},
editor = {Moreira, Ana and Grundy, John},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Bouck{\'{e}}, Garcia, Holvoet - 2007 - Composing Structural Views in xADL.pdf:pdf},
pages = {115--138},
publisher = {Springer-Verlag},
title = {{Composing Structural Views in xADL}},
url = {http://www.springerlink.com/index/R2Q6575336Q12K81.pdf},
year = {2007}
}
@inproceedings{clements1996-adlsurvey,
abstract = {Architecture Description Languages (ADLs) are emerging as viable tools for formally representing the architectures of systems. While growing in number, they vary widely in terms of the abstractions they support and analysis capabilities they provide. Further, many languages not originally designed as ADLs serve reasonably well at representing and analyzing software architectures. This paper summarizes a taxonomic survey of ADLs that is in progress. The survey characterizes ADLs in terms of (a) the classes of systems they support; (b) the inherent properties of the languages themselves; and (c) the process and technology support they provide to represent, refine, analyze, and build systems from an architecture. Preliminary results allow us to draw conclusions about what constitutes an ADL, and how contemporary ADLs differ from each other.},
author = {Clements, Paul C},
booktitle = {8th International Workshop on Software Specification and Design (IWSSD 96)},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Clements - 1996 - A Survey of Architecture Description Languages.pdf:pdf},
number = {March},
pages = {16--25},
publisher = {IEEE Computer Society},
title = {{A Survey of Architecture Description Languages}},
url = {http://dl.acm.org/citation.cfm?id=858261},
year = {1996}
}
@inproceedings{cuenot2010-east,
abstract = {Current trends in automotive embedded systems focus on how to manage the increasing software content, with a strong emphasis on standardization of the embedded software structure. The management of engineering information remains a critical challenge in order to support development and other stages of the life-cycle. System modelling based on an Architecture Description Language (ADL) is a way to keep these assets within one information structure. This paper presents the EAST-ADL2 modelling language, developed in the ITEA EAST-EEA project and further enhanced in the ATESST project (www.atesst.org). EAST-ADL2 supports comprehensive model-based development of embedded systems and provides dedicated constructs to facilitate variability and product line management, requirements engineering, representation of functional as well as software/hardware solutions, and timing and safety analysis.},
author = {Cuenot, Philippe and Frey, Patrick and Johansson, Rolf and L{\"{o}}nn, Henrik and Papadopoulos, Yiannis and Reiser, Mark Oliver and Sandberg, Anders and Servat, David and {Tavakoli Kolagari}, Ramin and T{\"{o}}rngren, Martin and Weber, Matthias},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-16277-0_11},
isbn = {3642162762},
issn = {03029743},
title = {{The EAST-ADL architecture description language for automotive embedded software}},
year = {2010}
}
@inproceedings{dashofy2001-xadl,
abstract = {Software architecture research focuses on models of software architectures as specified in architecture description languages (ADLs). As research progresses in specific areas of software architectures, more and more architectural information is created. Ideally, this information can be stored in the model. An extensible modeling language is crucial to experimenting with and building tools for novel modeling constructs that arise from evolving research. Traditional ADLs typically support a small set of modeling constructs very well, but adapt to others poorly. XML provides an ideal platform upon which to develop an extensible modeling language for software architectures. Previous XML-based ADLs successfully leveraged XML's large base of off-the-shelf tool support, but did not take advantage of its extensibility. To give software architecture researchers more freedom to explore new possibilities and modeling techniques, while maximizing reuse of tools and modeling constructs, we have developed xADL 2.0, a highly extensible XML-based ADL. xADL 2.0 supports run-time and design time modeling, architecture configuration management and model-based system instantiation. Additionally, xADL 2.0 has a set of extensible infrastructure tools that support the creation, manipulation, and sharing of xADL 2.0 documents},
author = {Dashofy, E.M. and van der Hoek, A. and Taylor, R.N.},
booktitle = {2001 Working IEEE/IFIP Conference on Software Architecture (WICSA 2001)},
doi = {10.1109/WICSA.2001.948416},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Dashofy, van der Hoek, Taylor - 2001 - A highly-extensible, XML-based architecture description language.pdf:pdf},
isbn = {0-7695-1360-3},
pages = {103--112},
publisher = {IEEE Comput. Soc},
title = {{A highly-extensible, XML-based architecture description language}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=948416},
year = {2001}
}
@article{dashofy2005-xadl,
abstract = {Research over the past decade has revealed that modeling software architecture at the level of components and connectors is useful in a growing variety of contexts. This has led to the development of a plethora of notations for representing software architectures, each focusing on different aspects of the systems being modeled. In general, these notations have been developed without regard to reuse or extension. This makes the effort in adapting an existing notation to a new purpose commensurate with developing a new notation from scratch. To address this problem, we have developed an approach that allows for the rapid construction of new architecture description languages (ADLs). Our approach is unique because it encapsulates ADL features in modules that are composed to form ADLs. We achieve this by leveraging the extension mechanisms provided by XML and XML schemas. We have defined a set of generic, reusable ADL modules called xADL 2.0, useful as an ADL by itself, but also extensible to support new applications and domains. To support this extensibility, we have developed a set of reflective syntax-based tools that adapt to language changes automatically, as well as several semantically-aware tools that provide support for advanced features of xADL 2.0. We demonstrate the effectiveness, scalability, and flexibility of our approach through a diverse set of experiences. First, our approach has been applied in industrial contexts, modeling software architectures for aircraft software and spacecraft systems. Second, we show how xADL 2.0 can be extended to support the modeling features found in two different representations for modeling product-line architectures. Finally, we show how our infrastructure has been used to support its own development. The technical contribution of our infrastructure is augmented by several research contributions: the first decomposition of an architecture description language into modules, insights about how to develop new language modules and a process for integrating them, and insights about the roles of different kinds of tools in a modular ADL-based infrastructure.},
author = {Dashofy, Eric M and van der Hoek, Andr{\'{e}} and Taylor, Richard N},
doi = {10.1145/1061254.1061258},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Dashofy, Hoek, Taylor - 2005 - A comprehensive approach for the development of modular software architecture description languages.pdf:pdf},
issn = {1049331X},
journal = {ACM Transactions on Software Engineering and Methodology},
month = {apr},
number = {2},
pages = {199--245},
title = {{A comprehensive approach for the development of modular software architecture description languages}},
url = {http://portal.acm.org/citation.cfm?doid=1061254.1061258},
volume = {14},
year = {2005}
}
@inproceedings{dashofy2002-xadlinfa,
abstract = {Research and experimentation in software architectures over the past decade have yielded a plethora of software architecture description languages (ADLs). Continuing innovation indicates that it is reasonable to expect more new ADLs, or at least ADL features. This research process is impeded by the difficulty and cost associated with developing new notations. An architect in need of a unique set of modeling features must either develop a new architecture description language from scratch or undertake the daunting task of modifying an existing language. In either case, it is unavoidable that a significant effort will be expended in building or adapting tools to support the language. To remedy this situation, we have developed an infrastructure for the rapid development of new architecture description languages. Key aspects of the infrastructure are its XML-based modular extension mechanism, its base set of reusable and customizable architectural modeling constructs, and its equally important set of flexible support tools. This paper introduces the infrastructure and demonstrates its value in the context of several real-world applications.},
author = {Dashofy, Eric M and Taylor, Richard N},
booktitle = {24th International Conference on Software Engineering (ICSE2002)},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Dashofy, Taylor - 2002 - An Infrastructure for the Rapid Development of XML-based Architecture Description Languages.pdf:pdf},
pages = {266--276},
publisher = {ACM Press},
title = {{An Infrastructure for the Rapid Development of XML-based Architecture Description Languages}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.13.914},
year = {2002}
}
@inproceedings{desilva2011-rationale,
abstract = {Besides structural and behavioural properties, rationale plays a crucial role in defining the architecture of a software system. However, unlike other architectural features, rationale often remains unspecified and inaccessible to tools. Existing approaches for recording rationale are not widely adopted. This paper proposes a simple model for capturing rationales as part of an architecture specification and attaching them to elements in the architecture. The bi-directional links between rationales and elements enable forward and backward traceability. We describe a textual architecture description language named Grasp that implements this model, and illustrate its capabilities using an example.},
annote = {10.1007/978-3-642-23798-0{\_}34},
author = {de Silva, Lakshitha and Balasubramaniam, Dharini},
booktitle = {5th European Conferene on Software Architecture (ECSA 2011), LNCS 6903},
doi = {10.1007/978-3-642-23798-0_34},
editor = {Crnkovic, Ivica and Gruhn, Volker and Book, Matthias},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/de Silva, Balasubramaniam - 2011 - A Model for Specifying Rationale Using an Architecture Description Language.pdf:pdf},
isbn = {978-3-642-23797-3},
pages = {319--327},
publisher = {Springer Berlin / Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{A Model for Specifying Rationale Using an Architecture Description Language}},
url = {http://dx.doi.org/10.1007/978-3-642-23798-0{\_}34},
volume = {6903},
year = {2011}
}
@inproceedings{diruscio2010-byadl,
abstract = {In order to deal with evolving needs and stakeholder concerns, next generation ADLs should support incremental extension and customization. In this direction we proposed byADL (Build Your ADL), a framework which allows software architects to (i) extend existent ADLs with domain specificities, new architectural views, or analysis aspects, (ii) integrate an ADL with development processes and methodologies, and (iii) customize an ADL. This paper presents the byADL tool and its features.},
author = {{Di Ruscio}, Davide and Malavolta, Ivano and Muccini, Henry and Pelliccione, Patrizio and Pierantonio, Alfonso},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-15114-9_56},
isbn = {3642151132},
issn = {03029743},
title = {{ByADL: An MDE framework for building extensible architecture description languages}},
year = {2010}
}
@techreport{feiler2006-aadl,
abstract = {In November 2004, the Society of Automotive Engineers (SAE) released the aerospace standard AS5506, named the Architecture Analysis {\&} Design Language (AADL). The AADL is a modeling language that supports early and repeated analyses of a system's architecture with respect to performance-critical properties through an extendable notation, a tool framework, and precisely defined semantics. The language employs formal modeling concepts for the description and analysis of application system architectures in terms of distinct components and their interactions. It includes abstractions of software, computational hardware, and system components for (a) specifying and analyzing real-time embedded and high dependability systems, complex systems of systems, and specialized performance capability systems and (b) mapping of software onto computational hardware elements. The AADL is especially effective for model-based analysis and specification of complex real- time embedded systems. This technical note is an introduction to the concepts, language structure, and application of the AADL.},
address = {Pittsburgh, Pennsylvania},
author = {Feiler, Peter H and Gluch, David P and Hudak, John J},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Feiler, Gluch, Hudak - 2006 - The Architecture Analysis {\&} Design Language ( AADL ) An Introduction.pdf:pdf},
institution = {Software Engineering Institute, Carnegie Mellon University},
number = {CMU/SEI-2006-TN-011},
pages = {CMU/SEI--2006--TN--011},
title = {{The Architecture Analysis {\&} Design Language ( AADL ): An Introduction}},
url = {http://www.sei.cmu.edu/library/abstracts/reports/06tn011.cfm},
year = {2006}
}
@techreport{feiler2000-realtime,
abstract = {This paper discusses a model-based architectural approach for improving predictability of performance in embedded real-time systems. This approach utilizes automated analysis of task and communication architectures to provide insight into schedulability and reliability during design. Automatic generation of a runtime executive that performs task dispatching and inter-task communication eliminates manual coding errors and results in a system that satisfies the specified execution behavior. The MetaH language and toolset supports this model-based approach. MetaH has been used by the U.S. Army in a pilot project applied to missile guidance systems. Reduced time and cost benefits that have been observed will be discussed as a case study. The paper closes by outlining the current state of commercial availability of such technology and efforts to develop standards, such as those put forth by the Society of Automotive Engineers (SAE); Avionics Systems Division (ASD); working group on Avionics Architecture Description Language (AADL); and the Object Management Group (OMG) Unified Modeling Language (UML) working group on real-time and performance support in UML.},
address = {Pittsburgh, Pennsylvania},
author = {Feiler, Peter H and Lewis, Bruce and Vestal, Steve},
doi = {10.21236/ada387086},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Feiler, Lewis, Vestal - 2000 - Improving Predictability in Embedded Real-Time Systems.pdf:pdf},
institution = {Software Engineering Institute, Carnegie Mellon University},
month = {dec},
number = {December},
pages = {CMU/SEI--2000--SR--011},
publisher = {Defense Technical Information Center},
title = {{Improving Predictability in Embedded Real-Time Systems}},
url = {https://doi.org/10.21236{\%}2Fada387086 http://www.sei.cmu.edu/library/abstracts/reports/00sr011.cfm},
year = {2000}
}
@techreport{fuxman2000-adlsurvey,
abstract = {In the last few years, a considerable number of architecture description languages (ADLs) have been proposed for describing and reasoning about software architectures. In this work, we classify and compare several ADLs placing emphasis on their features for formal modelling and analysis.},
author = {Fuxman, Arel D.},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Fuxman - 2000 - A Survey of Architecture Description Languages.pdf:pdf},
institution = {Dept of Computer Science, University of Toronto},
pages = {CSRG--407},
title = {{A Survey of Architecture Description Languages}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.7113 http://www.cs.toronto.edu/{~}chechik/courses99/csc2108/projects/index.html http://www.cs.toronto.edu/pub/reports/csrg/407/},
year = {2000}
}
@article{garlan1994-aesop,
abstract = {As the design of software architectures emerges as a discipline within software engineering, it will become increasingly important to support architectural description and analysis with tools and environments. In this paper we describe a system for developing architectural design environments that exploit architectural styles to guide software architects in producing specific systems. The primary contributions of this research are: (a) a generic object model for representing architectural designs; (b) the characterization of architectural styles as specializations of this object model; and (c) a toolkit for creating an open architectural design environment from a description of a specific architectural style. We use our experience in implementing these concepts to illustrate how style-oriented architectural design raises new challenges for software support environments.},
author = {Garlan, David and Allen, Robert and Ockerbloom, John},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Garlan, Allen, Ockerbloom - 1994 - Exploiting style in architectural design environments.pdf:pdf},
journal = {ACM SIGSOFT Software Engineering Notes},
number = {Issue 5},
pages = {175 -- 188},
title = {{Exploiting style in architectural design environments}},
url = {http://dl.acm.org/citation.cfm?id=195404},
volume = {Volume 19},
year = {1994}
}
@inproceedings{garlan1997-acme,
abstract = {Numerous architectural description languages (ADLs) have been developed, each providing complementary capabilities for architectural development and analysis. Unfortunately, each ADL and supporting toolset operates in isolation, making it difficult to integrate those tools and share architectural descriptions. ACME is being developed as a joint effort of the software architecture research community as a common interchange format for architecture design tools. ACME provides a structural framework for characterizing architectures, together with annotation facilities for additional ADL-specific information. This scheme permits subsets of ADL tools to share architectural information that is jointly understood, while tolerating the presence of information that falls outside their common vocabulary. In this paper we describe ACME's key features, rationale, and technical innovations.},
address = {Toronto, Ontario},
author = {Garlan, David and Monroe, R and Wile, D},
booktitle = {CASCON '97 Proceedings of the 1997 conference of the Centre for Advanced Studies on Collaborative research},
editor = {Johnson, J. Howard},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Garlan, Monroe, Wile - 1997 - ACME An Architecture Description Interchange Language.pdf:pdf},
pages = {169--183},
publisher = {IBM Press},
title = {{ACME : An Architecture Description Interchange Language}},
url = {http://dl.acm.org/citation.cfm?id=782017},
year = {1997}
}
@inproceedings{gruhn2005-conmoto,
abstract = {In this paper we motivate an Architecture Description Language (ADL) for mobile distributed systems based on the $\pi$-calculus. Different from other approaches, the non-functional properties, which are essential when mobile architectures are described, are treated in a flexible manner by inserting logical formulae for expressing and checking non-functional properties into $\pi$-calculus processes. A formal example is given to illustrate the approach before the constituents of the ADL are sketched.},
address = {Pisa},
author = {Gruhn, Volker and Schafer, Clemens},
booktitle = {2nd European Workshop on Software Architecture (EWSA 2005)},
editor = {Morrison, Ron and Oquendo, Flavio},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Gruhn, Schafer - 2005 - Architecture Description for Mobile Distributed Systems.pdf:pdf},
isbn = {978-3-540-26275-6},
keywords = {LNCS 3527},
mendeley-tags = {LNCS 3527},
pages = {239--246},
publisher = {Springer Berlin / Heidelberg},
title = {{Architecture Description for Mobile Distributed Systems}},
year = {2005}
}
@article{malavolta2012-industryadlneeds,
abstract = {Many times we are faced with the proliferation of definitions, concepts, languages and tools in certain (research) topics. But often there is a gap between what is provided by existing technologies, and what is needed by their users. The strengths, limitations and needs of the available technologies can be dubious. The same applies to software architectures, and specifically to languages designed to represent architectural models. Many different architectural languages have been introduced in the last two decades. However, it is unclear if they fulfill the user{\&}amp;{\#}8217;s needs in architectural description. As a way to plan for next generation languages, this study analyzes practitioners{\&}amp;{\#}8217; perceived strengths, limitations and needs associated to existing languages for software architecture in industry. We run a survey by interviewing 48 practitioners from 40 different IT companies in 15 countries. Each participant is asked to fill in a questionnaire of 51 questions. By analyzing the data collected through this study, we have concluded that (a) whilst practitioners are generally satisfied with the design capabilities provided by the languages, they are dissatisfied with analysis features and the ability to define extra-functional properties; (b) architectural languages used in practice mostly originate from industry; (c) more formality and better usability are required.},
author = {{Ivano Malavolta}, Patricia Lago and Malavolta, Ivano and Lago, Patricia and Muccini, Henry and Pelliccione, Patrizio and Tang, Antony},
doi = {10.1109/TSE.2012.74},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Ivano Malavolta et al. - 2012 - What Industry Needs from Architectural Languages A Survey.pdf:pdf},
journal = {IEEE Transactions on Software Engineering},
month = {dec},
publisher = {IEEE},
title = {{What Industry Needs from Architectural Languages: A Survey}},
url = {http://www.computer.org/csdl/trans/ts/preprint/tts2012990044-abs.html},
volume = {Preprints},
year = {2012}
}
@inproceedings{kamal2007-adlpatterns,
abstract = {Architecture patterns provide solutions to recurring design problems at the architecture level. In order to model patterns during software architecture design, one may use a number of existing Architecture Description Languages (ADLs), including the UML, a generic language but also a de facto industry standard. Unfortunately, there is little explicit support offered by such languages to model architecture patterns, mostly due to the inherent variability that patterns entail. In this paper, we analyze the support that few selected languages offer in modeling a limited set of architecture patterns with respect to four specific criteria: syntax, visualization, variability, and extensibility. The results highlight the strengths and weaknesses of the selected ADLs for modeling architecture patterns in software design.},
address = {Luxembourg},
author = {Kamal, Ahmad Waqas and Avgeriou, Paris},
booktitle = {4th International Workshop on Rapid Integration of Software Engineering techniques (RISE07)},
editor = {Guelfi, Nicolas},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Kamal, Avgeriou - 2007 - An Evaluation of ADLs on Modeling Patterns for Software Architecture.pdf:pdf},
keywords = {ADLs,Architecture Patterns,Modeling,Software Architecture,UML.},
publisher = {Springer-Verlag},
title = {{An Evaluation of ADLs on Modeling Patterns for Software Architecture}},
year = {2007}
}
@phdthesis{klein2000-model,
abstract = {This dissertation is devoted to the topic of architecture modeling for software systems. The architecture describes the structural composition of a system from components and relation- ships between these components. Thereby, it provides a basis for the system's realization on technical as well as on organizational level.},
author = {Klein, Peter},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Klein - 2000 - Architecture Modeling of Distributed and Concurrent Software Systems.pdf:pdf},
school = {heinisch-Westfälischen Technischen Hochschule Aachen},
title = {{Architecture Modeling of Distributed and Concurrent Software Systems}},
type = {PhD},
url = {http://pi.informatik.uni-siegen.de/gi/stt/23{\_}3/05{\_}Dissertationen/klein.pdf},
volume = {82},
year = {2000}
}
@incollection{klein2010-model,
author = {Klein, Peter},
booktitle = {Graph transformations and model-driven engineering},
file = {::},
pages = {249--273},
publisher = {Springer-Verlag},
title = {{The architecture description language model}},
url = {http://www.springerlink.com/index/2K65413251M333RP.pdf},
year = {2010}
}
@article{loques2004,
abstract = {This paper presents a comprehensive approach to describe, deploy and adapt component-based applications having dynamic non-functional requirements. The approach is centered on high-level contracts associated to architectural descriptions, which allow the non-functional requirements to be handled separately during the system design process. This helps to achieve separation of concerns facilitating the reuse of modules that implement the application in other systems. Besides specifying non-functional requirements, contracts are used at runtime to guide configuration adaptations required to enforce these requirements. The infrastructure required to manage the contracts follows an architectural pattern, which can be directly mapped to specific components included in a support- ing reflective middleware. This allows designers to write a contract and to follow standard recipes to insert the extra code required to its enforcement in the supporting middleware.},
author = {Loques, Orlando and Sztajnberg, Alexandre and Curty, Romulo and Ansaloni, Sidney},
doi = {10.1007/BF03192350},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Loques et al. - 2004 - A contract-based approach to describe and deploy non-functional adaptations in software architectures.pdf:pdf},
issn = {0104-6500},
journal = {Journal of the Brazilian Computer Society},
keywords = {contracts,dynamic configuration adaptation,middleware,non-functional requirements,separation of concerns,software architectures},
month = {feb},
number = {1},
pages = {5--20},
title = {{A contract-based approach to describe and deploy non-functional adaptations in software architectures}},
url = {http://www.springerlink.com/index/10.1007/BF03192350},
volume = {10},
year = {2004}
}
@article{luckham1995-rapide,
abstract = {Rapide is an event-based concurrent object-oriented language specifically designed for prototyping system architectures. Two principle design goals are (1) to provide constructs for defning executable prototypes of architectures and (2) to adopt an execution model in which the concurrency synchronization dataflow and timing properties of a prototype are explicitly represented. This paper describes the partially ordered event set (poset) execution model and outlines with examples some of the event-based features for defining communication architectures and relationships between architectures. Various features of Rapide are illustrated by excerpts from a prototype of the X/Open distributed transaction processing reference architecture.},
author = {Luckham, DC C and Kenney, JJ J and Augustin, L.M. M and Vera, J. and Bryan, D. and Mann, W.},
doi = {10.1109/32.385971},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Luckham et al. - 1995 - Specification and analysis of system architecture using Rapide.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {architecture,architecture definition languages,causality,concurrency,constraint-based specification,event patterns,formal constraints,partially ordered event sets,prototyping,rapide,simulation},
month = {apr},
number = {4},
pages = {336--354},
publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
title = {{Specification and analysis of system architecture using Rapide}},
url = {https://doi.org/10.1109{\%}2F32.385971 http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=385971 http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=385971},
volume = {21},
year = {1995}
}
@article{luckham1995-rapide,
abstract = {This paper discusses general requirements for architecture definition languages, and describes the syntax and semantics of the subset of the Rapide language that is designed to satisfy these requirements. Rapide is a concurrent event-based simulation language for defining and simulating the behavior of system architectures. Rapide is intended for modelling the architectures of concurrent and distributed systems, both hardware and software in order to represent the behavior of distributed systems in as much detail as possible. Rapide is designed to make the greatest possible use of event-based modelling by producing causal event simulations. When a Rapide model is executed it produces a simulation that shows not only the events that make up the model's behavior, and their timestamps, but also which events caused other events, and which events happened independently. The architecture definition features of Rapide are described: event patterns, interfaces, architectures and event pattern mappings. The use of these features to build causal event models of both static and dynamic architectures is illustrated by a series of simple examples from both software and hardware. Also we give a detailed example of the use of event pattern mappings to define the relationship between two architectures at different levels of abstraction. Finally, we discuss briefly how Rapide is related to other event-based languages.},
author = {Luckham, DC and Vera, James},
doi = {10.1109/32.464548},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Luckham, Vera - 1995 - An event-based architecture definition language.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {architecture,architecture de nition languages,causal-,concur-,event patterns,formal constraints,par-,prototyping,rapide,rency,simulation,tially ordered event sets},
number = {9},
pages = {717--734},
title = {{An event-based architecture definition language}},
url = {http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=464548 http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=464548},
volume = {21},
year = {1995}
}
@inproceedings{magee1994-regis,
abstract = {Regis is a programming environment aimed at supporting the development and execution of parallel and distributed programs. It embodies a constructive approach to the development of programs based on separating program structure from communication and computation. The emphasis is on constructing programs from multiple parallel computational components which cooperate to achieve the overall goal. The environment is designed to easily accommodate multiple communication mechanisms and primitives. Both the computational and communication elements of Regis programs are programmed in the object oriented programming language C++. The elements are combined into parallel and distributed programs using the configuration language Darwin. The paper describes programming in Regis through a set of small example programs.},
author = {Magee, J. and Dulay, N. and Kramer, J.},
booktitle = {2nd International Workshop on Configurable Distributed Systems},
doi = {10.1109/IWCDS.1994.289940},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Magee, Dulay, Kramer - 1994 - A constructive development environment for parallel and distributed programs.pdf:pdf},
isbn = {0-8186-5390-6},
keywords = {communication,distributed programming,inter-process,parallel programming,parallel programming language,software development},
pages = {4--14},
publisher = {IEEE},
title = {{A constructive development environment for parallel and distributed programs}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=289940},
year = {1994}
}
@inproceedings{magee1995-darwin,
address = {Essen, Germany},
author = {Magee, Jeff and Dulay, Naranker and Eisenbach, Susan and Kramer, Jeff},
booktitle = {5th European Software Engineering Conference (ESEC1995)},
doi = {10.1.1.25.7933},
editor = {Sch{\"{a}}fer, Wilhelm and Botella, Pere},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Magee et al. - 1995 - Specifying Distributed Software Architectures(2).pdf:pdf},
keywords = {LNCS6093},
pages = {137--153},
publisher = {Springer-Verlag},
title = {{Specifying Distributed Software Architectures}},
url = {http://dl.acm.org/citation.cfm?id=651497},
year = {1995}
}
@article{magee1996-darwin,
author = {Magee, Jeff and Kramer, Jeff},
doi = {10.1145/250707.239104},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Magee, Kramer - 1996 - Dynamic structure in software architectures.pdf:pdf},
isbn = {0897917979},
issn = {01635948},
journal = {ACM SIGSOFT Software Engineering Notes},
month = {nov},
number = {6},
pages = {3--14},
title = {{Dynamic structure in software architectures}},
url = {http://portal.acm.org/citation.cfm?doid=250707.239104},
volume = {21},
year = {1996}
}
@article{malavolta2010-modeltransformation,
author = {Malavolta, I. and Muccini, H. and Pelliccione, P. and Tamburri, D.a.},
doi = {10.1109/TSE.2009.51},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Malavolta et al. - 2010 - Providing Architectural Languages and Tools Interoperability through Model Transformation Technologies.pdf:pdf},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
month = {jan},
number = {1},
pages = {119--140},
title = {{Providing Architectural Languages and Tools Interoperability through Model Transformation Technologies}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5204094},
volume = {36},
year = {2010}
}
@inproceedings{medvidovic1996-dynadls,
address = {New York, New York, USA},
author = {Medvidovic, Nenad},
booktitle = {Joint proceedings of the second international software architecture workshop (ISAW-2) and international workshop on multiple perspectives in software development (Viewpoints '96) on SIGSOFT '96 workshops -},
doi = {10.1145/243327.243340},
editor = {Wolf, Alexander L. and Finkelstein, Anthony and Spanoudakis, George and Vidal, Laura},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Medvidovic - 1996 - ADLs and dynamic architecture changes.pdf:pdf},
isbn = {0897918673},
pages = {24--27},
publisher = {ACM Press},
title = {{ADLs and dynamic architecture changes}},
url = {http://portal.acm.org/citation.cfm?doid=243327.243340},
year = {1996}
}
@techreport{medvidovic2000-archintegn,
abstract = {Software architecture research has yielded a variety of powerful techniques for assisting in the design, implementation, and long-term evolution of complex, heterogeneous, distributed, multi-user applications. Since software development environments are themselves applications with these characteristics, it is natural to examine the effectiveness of an architectural approach to constructing and changing them. We report on our experience in creating a family of related environments in this manner. The environments encompass a range of services and include commercial off-the-shelf products as well as custom-built tools. The particular architectural approach adopted is fully reflexive: the environments are used in their own construction and evolution. We also report on some engineering experiences, in particular with our use of XML as the vehicle for supporting a common and extensible representation of architectural models, including the model of the environment itself. Generally applicable lessons from the experience are described.},
author = {Medvidovic, Nenad and Oreizy, Peyman and Taylor, RN and Khare, Rohit and Guntersdorfer, Michael},
doi = {10.1.1.224.7230},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Medvidovic et al. - 2000 - An Architecture-Centered Approach to Software Environment Integration.pdf:pdf},
institution = {Center for Software Engineering, University of Southern California},
keywords = {off-the-shelf reuse,software architectures,software environments,tool integration,xml},
pages = {Technical Report USC--CSE--00--516},
title = {{An Architecture-Centered Approach to Software Environment Integration}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.224.7230},
year = {2000}
}
@inproceedings{medvidovic1997-adldomains,
abstract = {Software architectures shift the focus of developers from lines-of-code to coarser-grained elements and their interconnection structure. Architecture description languages (ADLs) have been proposed as domain-specific languages for the domain of software architecture. There is still little consensus in the research community on what problems are most important to address in a study of software architecture, what aspects of an architecture should be modeled in an ADL, or even what an ADL is. To shed light on these issues, we provide a framework of architectural domains, or areas of concern in the study of software architectures. We evaluate existing ADLs with respect to the framework and study the relationship between architectural and application domains. One conclusion is that, while the architectural domains perspective enables one to approach architectures and ADLs in a new, more structured manner, further understanding of architectural domains, their tie to application domains, and their specific influence on ADLs is needed.},
address = {Santa Barbara, California},
author = {Medvidovic, Nenad and Rosenblum, David S.},
booktitle = {Conference on Domain-Specific Languages on Conference on Domain-Specific Languages (DSL97)},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Medvidovic, Rosenblum - 1997 - Domains of concern in software architectures and architecture description languages.pdf:pdf},
isbn = {0897918673},
keywords = {architectural domain,architecture description language,domain,domain-specific language,software architecture},
pages = {16},
publisher = {ACM Press},
title = {{Domains of concern in software architectures and architecture description languages}},
url = {http://portal.acm.org/citation.cfm?doid=243327.243626},
year = {1997}
}
@article{medvidovic1997-adlclassification,
abstract = {Software architectures shift developers' focus from lines-of-code to coarser-grained architectural elements and their interconnection structure. Architec- ture description languages (ADLs) have been proposed as modeling notations to support architecture-based development. There is, however, little consensus in the research community on what is an ADL, what aspects of an architecture should be modeled in an ADL, and which ADL is best suited for a particular problem. Fur- thermore, the distinction is rarely made between ADLs on one hand and formal specification, module interconnection, simulation, and programming languages on the other. This paper attempts to provide an answer to these questions. It motivates and presents a definition and a classification framework for ADLs. The utility of the definition is demonstrated by using it to differentiate ADLs from other modcling notations. The framework is used to classify and compare several existing ADLs.},
author = {Medvidovic, Nenad and Taylor, Richard N.},
doi = {10.1145/267896.267903},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Medvidovic, Taylor - 1997 - A framework for classifying and comparing architecture description languages.pdf:pdf},
issn = {01635948},
journal = {ACM SIGSOFT Software Engineering Notes},
keywords = {architecture description languages,classification,comparison,definition,software architecture},
month = {nov},
number = {6},
pages = {60--76},
title = {{A framework for classifying and comparing architecture description languages}},
url = {http://portal.acm.org/citation.cfm?doid=267896.267903},
volume = {22},
year = {1997}
}
@inproceedings{medvidovic1996-c2,
abstract = {Software architectures are multi-dimensional entities that can be fully understood only when viewed and analyzed at four different levels of abstraction: (1) internal functionality of a component, (2) the interface(s) exported by the component to the rest of the system, (3) interconnection of architectural elements in an architecture, and (4) rules of the architectural style. This paper presents the characteristics of each of the four levels of architectural abstraction, outlines the kinds of analyses that need to be performed at each level, and discusses the kinds of formal notations that are suitable at each level. We use the pipe-and-filter and Chiron-2 (C2) architectural styles as illustrations. In particular, we present formal models of C2 at the last three levels of abstraction as a first step in enabling a C2 design environment to perform the necessary analyses of architectures. We discuss the benefits of the formal definitions and our experience to date. 1 Keywords Software architectures, architectural styles, formalism, architecture definition languages, interface definition languages},
author = {Medvidovic, Nenad and Taylor, Richard N. and Whitehead, E. James},
booktitle = {California Software Symposium},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Medvidovic, Taylor, Whitehead - 1996 - Formal modeling of software architectures at multiple levels of abstraction.pdf:pdf},
keywords = {architectural styles,architecture definition languages,formalism,interface definition,software architectures},
pages = {28--40},
title = {{Formal modeling of software architectures at multiple levels of abstraction}},
url = {http://www.cs.ucsc.edu/{~}ejw/papers/medvidovic{\_}css96.pdf},
year = {1996}
}
@article{medvidovic2000-adlcomparison,
abstract = {Software architectures shift the focus of developers from lines-of-code to coarser-grained architectural elements and their overall interconnection structure. Architecture description languages (ADLs) have been proposed as modeling notations to support architecture-based development. There is, however, little consensus in the research community on what is an ADL, what aspects of an architecture should be modeled in an ADL, and which of several possible ADLs is best suited for a particular problem. Furthermore, the distinction is rarely made between ADLs on one hand and formal specification, module interconnection, simulation and programming languages on the other. This paper attempts to provide an answer to these questions. It motivates and presents a definition and a classification framework for ADLs. The utility of the definition is demonstrated by using it to differentiate ADLs from other modeling notations. The framework is used to classify and compare several existing ADLs, enabling us, in the process, to identify key properties of ADLs. The comparison highlights areas where existing ADLs provide extensive support and those in which they are deficient, suggesting a research agenda for the future},
author = {Medvidovic, Nenad and Taylor, RN},
doi = {10.1109/32.825767},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Medvidovic, Taylor - 2000 - A Classification and Comparison Framework for Software Architecture Description Languages.pdf:pdf},
journal = {IEEE Transactions on Software Engineering},
number = {1},
pages = {70--93},
title = {{A Classification and Comparison Framework for Software Architecture Description Languages}},
url = {http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=825767},
volume = {26},
year = {2000}
}
@article{moriconi1995-archrefinement,
abstract = {method is presented for the stepwise refinement of an abstract architecture into a relatively correct lower level architecture that is intended to implement it. A refinement step involves the application of a predefined refinement pattern that provides a routine solution to a standard architectural design problem. A pattern contains an abstract architecture schema and a more detailed schema intended to implement it. The two schemas usually contain very different architectural concepts (from different architectural styles). Once a refinement pattern is proven correct, instances of it can be used without proof in developing specific architectures. Individual refinements are compositional, permitting incremental development and local reasoning. A special correctness criterion is defined for the domain of software architecture, as well as an accompanying proof technique. A useful syntactic form of correct composition is defined. The main points are illustrated by means of familiar architectures for a compiler. A prototype implementation of the method has been used successfully in a real application.},
author = {Moriconi, M. and Qian, X. and Riemenschneider, R.a.},
doi = {10.1109/32.385972},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Moriconi, Qian, Riemenschneider - 1995 - Correct architecture refinement.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Software architecture,composition.,formal methods,hierarchy,refinement patterns,relative correctness,stepwise refinement},
month = {apr},
number = {4},
pages = {356--372},
title = {{Correct architecture refinement}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=385972},
volume = {21},
year = {1995}
}
@techreport{moriconi1997-sadl,
author = {Moriconi, Mark and Riemenschneider, R A},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Moriconi, Riemenschneider - 1997 - Introduction to SADL 1 .0 A Language for Specifying Software Architecture Hierarchies.pdf:pdf},
institution = {Computer Science Laboratory, SRI International},
pages = {SRI--CSL--97--01},
title = {{Introduction to SADL 1 .0: A Language for Specifying Software Architecture Hierarchies}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.141.1060},
year = {1997}
}
@article{mouratidis2010-skwyrladl,
abstract = {Multi-Agent Systems (MAS) architectures are gaining popularity for building open, distributed, and evolving information systems. Unfortunately, despite considerable work in the fields of software architecture and MAS during the last decade, few research efforts have aimed at defining languages for designing and formalising secure agent architectures. This paper proposes a novel Architectural Description Language (ADL) for describing Belief-Desire-Intention (BDI) secure MAS. We specify each element of our ADL using the Z specification language and we employ two example case studies: one to assist us in the description of the proposed language and help readers of the article to better understand the fundamentals of the language; and one to demonstrate its applicability.},
author = {Mouratidis, Haralambos and Kolp, Manuel and Giorgini, Paolo and Faulkner, Stephane},
doi = {10.3233/WIA-2010-0182},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Unknown - 2010 - An Architectural Description Language for Secure Multi-Agent Systems.pdf:pdf},
issn = {1570-1263},
journal = {Web Intelligence and Agent Systems},
keywords = {BDI agent model,Multi-Agent Systems,architectural description language,security,software architecture},
month = {jan},
number = {1},
pages = {99--122},
title = {{An architectural description language for secure Multi-Agent Systems}},
url = {http://dl.acm.org/citation.cfm?id=1734707.1734713},
volume = {8},
year = {2010}
}
@article{oquendo2004-piadl,
abstract = {A key aspect of the design of any software system is its architecture. An architecture description, from a runtime perspective, should provide a formal specification of the architecture in terms of components and connectors and how they are composed together. Further, a dynamic architecture description must provide a specification of how the architecture of the software system can change at runtime. Enabling specification of dynamic architectures is a large challenge for an Architecture Description Language (ADL). This paper presents how $\pi$-ADL, a novel ADL that has been designed in the ArchWare European Project, can be used for specifying dynamic architectures through a case study. While most ADLs focus on describing software architectures from a structural viewpoint, $\pi$-ADL focuses on formally describing architectures encompassing both the structural and behavioural viewpoints. The $\pi$-ADL toolset is outlined.},
author = {Oquendo, Flavio},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Oquendo - 2004 - Formally Describing Dynamic Software Architectures with $\pi$-ADL.pdf:pdf},
journal = {World Scientific and Engineering Transactions on Systems},
month = {jun},
number = {8},
pages = {673--679},
title = {{Formally Describing Dynamic Software Architectures with $\pi$-ADL}},
url = {http://www.wseas.us/e-library/conferences/brazil2004/papers/470-154.pdf},
volume = {3},
year = {2004}
}
@inproceedings{oquendo2004-archware,
address = {St Andrews, Scotland},
author = {Oquendo, Flavio and Warboys, Brian and Morrison, Ron and Dindeleux, Régis and Gallo, Ferdinando and Garavel, Hubert and Occhipinti, Carmen},
booktitle = {EWSA 2004, LNCS 3047},
doi = {10.1007/978-3-540-24769-2_23},
editor = {Oquendo, Flavio and Warboys, Brian and Morrison, Ron},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Oquendo et al. - 2004 - ARCHWARE Architecting Evolvable Software.pdf:pdf},
pages = {257--271},
title = {{ARCHWARE: Architecting Evolvable Software}},
url = {http://www.springerlink.com/index/99hd3yhbchhtx4yk.pdf},
year = {2004}
}
@inproceedings{pinto2003-daopadl,
abstract = {Architecture description languages deal with the description, analysis and reuse of software architectures. This paper describes DAOP-ADL, a component- and aspect-based language to specify the architecture of an application in terms of components, aspects and a set of plug-compatibility rules between them. With the aim of connecting the specification of the application architecture to the implementation, we describe our language using XML and XML Schemas. The DAOP-ADL language was designed to be interpreted by DAOP, our own dynamic component- and aspect-oriented platform. DAOP provides a composition mechanism that plugs aspects into components dynamically at runtime. The software architect will use the DAOP-ADL language at design time to describe the architecture of the application. Later this architectural information is loaded into the DAOP platform, which needs it to establish the dynamic connections between autonomous components and aspects. Therefore, the use of DAOP-ADL closes the gap between design and implementation of component- and aspect-based applications.},
address = {Erfurt, Germany},
author = {Pinto, Monica and Fuentes, Lidia and Troya, Jose-Maria},
booktitle = {2nd international conference on Generative programming and component engineering (GPCE '03)},
editor = {Pfenning, Frank and Smaragdakis, Yannis},
file = {::},
pages = {118--137},
publisher = {Springer-Verlag},
title = {{DAOP-ADL : An Architecture Description Language for Dynamic Component and Aspect-Based Development}},
url = {http://dl.acm.org/citation.cfm?id=954186.954194},
year = {2003}
}
@article{poizat2006-kadl,
abstract = {Component Based Software Engineering has now emerged as a discipline for system development. After years of battle between component platforms, the need for means to abstract away from specific implementation details is now recognized. This paves the way for model driven approaches (such as MDE) but also for the more older Architectural Description Language (ADL) paradigm. In this paper we present KADL, an ADL based on the Korrigan formal language which supports the following features: integration of fully formal behaviours and data types, expressive component compo- sition mechanisms through the use of modal logic, specification readability through graphical notations, and dedicated architectural analysis techniques.},
author = {Poizat, Pascal and Royer, JC},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Poizat, Royer - 2006 - A Formal Architectural Description Language based on Symbolic Transition Systems and Modal Logic.pdf:pdf},
journal = {Journal of Universal Computer Science},
keywords = {abstract data,architectural description language,category,component based software engineering,graphical notations,mixed formal specifications,modal logic glue,symbolic transition systems,types,verification},
number = {12},
pages = {1741--1782},
title = {{A Formal Architectural Description Language based on Symbolic Transition Systems and Modal Logic}},
url = {http://www.jucs.org/jucs{\_}12{\_}12/a{\_}formal{\_}architectural{\_}description/jucs{\_}12{\_}12{\_}1741{\_}1782{\_}poizat.pdf},
volume = {12},
year = {2006}
}
@techreport{poizat2007-kadl,
abstract = {This report presents the cash-point case study and mainly describes its specifications with the KADL ADL. The language is a mixed of state transition diagrams, abstract datatype and modal logic. We emphasize the need for abstract and formal descriptions especially communication architectures. We also gives some proofs done using our specific tool based on symbolic transition systems. Last we discuss previous specifications for this case study.},
author = {Poizat, Pascal and Royer, Jean-claude},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Poizat, Royer - 2007 - KADL Specification of The Cash Point Case Study.pdf:pdf},
institution = {IBISC},
keywords = {Abstract Data Type,Architectural Description Language,Cash Point Case Study,Component Based Software Engineering,Symbolic Transition Systems,Verification},
number = {00},
pages = {00.0},
title = {{KADL Specification of The Cash Point Case Study}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.77.3130},
year = {2007}
}
@article{rademaker2005-cbabel,
author = {Rademaker, Alexandre and Braga, Christiano and Sztajnberg, Alexandre},
doi = {10.1016/j.entcs.2005.03.018},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Rademaker, Braga, Sztajnberg - 2005 - A Rewriting Semantics for a Software Architecture Description Language.pdf:pdf},
issn = {15710661},
journal = {Electronic Notes in Theoretical Computer Science},
month = {may},
pages = {345--377},
title = {{A Rewriting Semantics for a Software Architecture Description Language}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S157106610500229X},
volume = {130},
year = {2005}
}
@inproceedings{robbins1998-adlintegration,
abstract = {Software architecture descriptions are high-level models of software systems. Some researchers have proposed special- purpose architectural notations that have a great deal of expressive power but are not well integrated with common development methods. Others have used mainstream development methods that are accessible to developers, but lack semantics needed for extensive analysis. We describe an approach to combining the advantages of these two ways of modeling architectures. We present two examples of extending UML, an emerging standard design notation, for use with two architecture description languages, C2 and Wright. Our approach suggests a practical strategy for bringing architectural modeling into wider use, namely by incorporating substantial elements of architectural models into a standard design method.},
address = {Kyoto, Japan},
author = {Robbins, JE and Medvidovic, Nenad},
booktitle = {20th international conference on Software engineering (ICSE1998)},
file = {::},
isbn = {0818683686},
keywords = {architecture,constraint languages,description languages,incremental,object-oriented design,software architecture},
pages = {209--218},
publisher = {IEEE Computer Society},
title = {{Integrating architecture description languages with a standard design method}},
url = {http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=671120},
year = {1998}
}
@inproceedings{ruscio2010-byadl,
address = {Cape Town, South Africa},
author = {Ruscio, Davide Di and Malavolta, Ivano},
booktitle = {32nd ACM/IEEE International Conference on Software Engineering},
editor = {Kramer, Jeff and Bishop, Judith},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Ruscio, Malavolta - 2010 - Developing next generation ADLs through MDE techniques.pdf:pdf},
isbn = {9781605587196},
keywords = {adl,metamodeling,model driven,software architecture},
pages = {85--94},
publisher = {ACM},
title = {{Developing next generation ADLs through MDE techniques}},
url = {http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=6062076},
year = {2010}
}
@article{shaw1995-abstractions,
abstract = {Architectures for software use rich abstractions and idioms to describe system components, the nature of interactions among the components, and the patterns that guide the composition of components into systems. These abstractions are higher level than the elements usually supported by programming languages and tools. They capture packaging and interaction issues as well as computational functionality. Well-established (if informal) patterns guide the architectural design of systems. We sketch a model for defining architectures and present an implementation of the basic level of that model. Our purpose is to support the abstractions used in practice by software designers. The implementation provides a testbed for experiments with a variety of system construction mechanisms. It distinguishes among different types of components and different ways these components can interact. It supports abstract interactions such as data flow and scheduling on the same footing as simple procedure call. It can express and check appropriate compatibility restrictions and configuration constraints. It accepts existing code as components, incurring no runtime overhead after initialization. It allows easy incorporation of specifications and associated analysis tools developed elsewhere. The implementation provides a base for extending the notation and validating the model .},
author = {Shaw, M. and DeLine, R. and Klein, D.V. and Ross, T.L. and Young, D.M. and Zelesnik, G.},
doi = {10.1109/32.385970},
file = {::},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {architectural abstraction,architecture description language,organization,software architecture,software engineering,software system},
month = {apr},
number = {4},
pages = {314--335},
title = {{Abstractions for software architecture and tools to support them}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=385970},
volume = {21},
year = {1995}
}
@phdthesis{desilva2009-oslo,
abstract = {The architecture of a software system is crucial for studying the behaviour of the system and analysing the impact of changes made to the software. Besides descriptions of the structural organization of the system, an architecture also includes rationale for the various design choices made while constructing the system. Architecture rationale helps understand the intent of its designers which is imperative for maintaining the system. However, unlike the structural aspects of a software system, architecture rationale is often undocumented or inaccessible to tools. A number of formal approaches have been proposed to capture rationale though none have been widely adopted due their complexity. This work presents an approach to capture architecture rationale as part of the architecture modelling process. A conceptual framework was developed to associate design rationale to structural elements of an architecture. The framework models a bi- directional association between design rationale and architecture elements that provides forward and backward traceability. Consequently, an architecture description language (ADL) based on the conceptual framework was designed using the M-Grammar notation available as part of the Microsoft ―Oslo‖ Platform. A compiler that validates and executes architectures specified using the new ADL was developed along with a visualizer tool to renders an architecture using graphical notations. Finally, we evaluated the effectiveness of the conceptual model and the ADL for capturing architecture rationale. The expressiveness of the M-Grammar notation was also evaluated as part of this work.},
author = {Silva, Lakshitha De},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Silva - 2009 - A Rationale-based Architecture Description Language using the “ Oslo ” Modelling Platform.pdf:pdf},
number = {August},
pages = {62},
school = {University of St Andrews},
title = {{A Rationale-based Architecture Description Language using the “ Oslo ” Modelling Platform}},
year = {2009}
}
@article{smeda2005-madl2,
abstract = {The techniques of meta-modeling and meta-levels have become a mature concept and have been largely used to solve real problems in programming languages, distributed environments, knowledge representation, or data bases. In this article it is shown how the same techniques can be applied in component-based software architecture. It also shown the need to propose mechanisms of reflexivity within the domain of software architecture meta-modeling. The outcome of this is a meta-meta-architecture with a minimal core whose finality is to define meta-components, meta-connectors and meta-architectures. Call this meta-meta-architecture MADL (Meta Architecture Description Language).},
author = {Smeda, Adel and Khammaci, Tahar and Oussalah, Mourad},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Smeda, Khammaci, Oussalah - 2005 - Meta Architecting Towards a New Generation of Architecture Description Languages.pdf:pdf},
journal = {Journal of Computer Science},
keywords = {architecture description languages,component-based systems,software architecture},
number = {4},
pages = {454--460},
title = {{Meta Architecting : Towards a New Generation of Architecture Description Languages}},
url = {http://www.doaj.org/doaj?func=abstract{\&}id=1099285},
volume = {1},
year = {2005}
}
@inproceedings{smeda2005-madl,
abstract = {As the concept of meta-classes was introduced in order to permit the manipulation of classes, we introduce the concept of meta-components, meta-connectors, and meta- architectures to permit the manipulation and the redefinition of architectural elements (structural and behavioral). In this article we present a meta-meta- architecture called MADL (Meta Architecture Description Language) to abstract the notions of architectures (components, connectors, architectures), hence to facilitate their manipulation, reuse, and evolution; and also to ease (hence encourage) the transformation and comparison among ADLs.},
address = {Mt. Pleasant, MI, USA},
author = {Smeda, Adel and Oussalah, Mourad and Khammaci, Tahar},
booktitle = {Third ACIS Int'l Conference on Software Engineering Research, Management and Applications (SERA'05)},
doi = {10.1109/SERA.2005.50},
editor = {Malloy, Brian},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Smeda, Oussalah, Khammaci - 2005 - MADL Meta Architecture Description Language.pdf:pdf},
isbn = {0-7695-2297-1},
keywords = {architecture description languages,architectures,component,component-based software architecture,connectors,meta-modeling},
pages = {152--159},
publisher = {IEEE},
title = {{MADL: Meta Architecture Description Language}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1563156},
year = {2005}
}
@techreport{vestal1993-fouradls,
author = {Vestal, Steve},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Vestal - 1993 - A Cursory Overview and Comparison of Four Architecture Description Languages.pdf:pdf},
institution = {Honeywell Technology Center},
title = {{A Cursory Overview and Comparison of Four Architecture Description Languages}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.6.9755},
year = {1993}
}
@inproceedings{zhang2009-xyzadl,
abstract = {Web services are emerged as a popular application for implementing large-scale distributed, reactive systems. Web service composition is the hotspot research in the field of Web services. Because the validity is a key requirement in the description of Web service composition, a formal language XYZ/ADL is introduced which describe the composition from the view of architecture. In this paper, we define a mapping from XYZ/ADL to a more practical approach of Web service composition BPEL4WS which is difficult to verify the validity of the composition. First, define the conversion of XYZ/E to BPEL4WS, analyze the similarity between the design elements in XYZ/ADL and activities in BPEL4WS, and then do the conversion of XYZ/ADL to BPEL4WS.},
address = {Xiamen},
author = {Zhang, Guang-quan and Rong, Mei and Wei, Hui},
booktitle = {2009 WRI World Congress on Software Engineering (WCSE09)},
doi = {10.1109/WCSE.2009.389},
file = {::},
isbn = {978-0-7695-3570-8},
keywords = {web service composition,web services},
number = {60873047},
pages = {185--188},
publisher = {IEEE},
title = {{Description and Analysis for Web Service Composition Based on XYZ/ADL}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5319391},
year = {2009}
}
@inproceedings{zhang2011-mismatchdetection,
abstract = {The behaviour mismatch analysis is absolutely necessary for guaranteeing the correct composition of web services. In order to improve the reliability of the Web service composition, we present a mismatch detection method which can capture incompatible behavior and timed conflict among multiple asynchronous services. In this paper, we use software architecture description language XYZ/ADL based on temporal logic to describe Web service composition and use XYZ/RE to express the relative timed constraints. Additionally, we also set up a timed asynchronous service model TASM which can depict asynchronous interacting behavior and timed properties. In particular, the model satisfies the specification of model check UPPAAL. We convert XYZ/ADL description to TASM, and give the definition of compatibility. Then we use UPPAAL to realize mismatch detection of asynchronous Web services. Finally an example is demonstrated to illustrate how the approach we proposed works.},
address = {Jeju Island},
author = {Zhang, Guang-quan and Shi, Hui-juan and Rong, Mei},
booktitle = {2011 IEEE Asia-Pacific Services Computing Conference},
doi = {10.1109/APSCC.2011.44},
editor = {Lee, Changhoon and Hsu, Robert C. H. and Zhang, Jia},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Zhang, Shi, Rong - 2011 - Mismatch Detection of Asynchronous Web Services with Timed Constraints.pdf:pdf},
isbn = {978-1-4673-0206-7},
keywords = {asynchronous web services,mismatch detection,timed constraints,uppaal,xyz},
month = {dec},
number = {1},
pages = {251--258},
publisher = {IEEE},
title = {{Mismatch Detection of Asynchronous Web Services with Timed Constraints}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6127970},
year = {2011}
}
@inproceedings{zheng2010-dpdadl,
abstract = {Architecture description language (ADL) provides a linguistic approach to represent software architecture. Usually, it has to develop a new ADL for a particular domain. Some domains are difficult to develop the ADLs, e.g. data processing domain (DPD). Since the products of these domains can apply to many different areas as a sub module, which complicates the architecture abstraction. This paper shows the development of our ADL for data processing domain. It has domain independence meta model concept, and it supports variability description and the code generation rules have been indicated too. Our data processing product line can be described by this ADL and generate product code, which will improve the productivity.},
author = {Zheng, Li and Wu, Zhanwei and Zhang, Chao and Yang, Fang},
booktitle = {2010 Seventh International Conference on Information Technology},
doi = {10.1109/ITNG.2010.25},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Zheng et al. - 2010 - Developing an Architecture Description Language for Data Processing Product Line.pdf:pdf},
isbn = {978-1-4244-6270-4},
keywords = {adl,dsm,mda,software architecture,software product line},
pages = {944--949},
publisher = {IEEE},
title = {{Developing an Architecture Description Language for Data Processing Product Line}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5501510},
year = {2010}
}
@techreport{Zhu,
abstract = {The architecture description language (ADL) is the foundation of software development based on software architecture. It is desirable that an ADL can represent both high-level abstract specification and the concrete implementation, thereby provides premise for the smooth transition from specification to implementation. In this aspect, the ADL XYZ/ADL has its built-in advantage, because it is based on the temporal logic language XYZ/E, which can represent both dynamic semantics and static semantics of systems with a unified logical framework. In this paper, the concept framework and syntax of XYZ/ADL is presented and its underlying semantic is explained using XYZ/E, and how to describe software architecture using XYZ/ADL is illustrated.},
author = {Zhu, Xue-Yang and Tang, Zhi-Song},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Zhu, Tang - Unknown - Formalising Software Architecture Description with Temporal Logic.pdf:pdf},
keywords = {Software architecture,XYZ/E,architecture description language,specification,temporal logic},
number = {2},
title = {{Formalising Software Architecture Description with Temporal Logic}}
}
@article{zhu2003-xyzadl,
abstract = {The architecture description language (ADL) is the foundation of software development based on software architecture. An ADL supporting stepwise refinement can make it more convenient that a good design leads to a good implementation. The architecture description language XYZ/ADL can support the stepwise transition from higher-level architectures to lower-level architectures, because it is based on the temporal logic language (TLL) XYZ/E, which can represent both dynamic semantics and static semantics under a unified logical framework. In this paper, the framework and syntax of XYZ/ADL is presented and its underlying semantics is explained using XYZ/E, and how to describe software architecture and software architecture style using XYZ/ADL is introduced.},
author = {Zhu, Xue-Yang and Tang, Zhi-Song},
file = {:Users/eoin/Library/Application Support/Mendeley Desktop/Downloaded/Zhu, Tang - 2003 - A temporal logic- based software architecture description language XYZADL.pdf:pdf},
journal = {Journal of Software},
keywords = {architecture description language,chinese-language,software architecture,specification,temporal logic language XYZ/E},
mendeley-tags = {chinese-language},
number = {4},
pages = {713--720},
title = {{A temporal logic- based software architecture description language XYZ/ADL}},
volume = {14},
year = {2003}
}
